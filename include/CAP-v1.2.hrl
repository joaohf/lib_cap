%% HRL file generated by ERLSOM
%%
%% It is possible (and in some cases necessary) to change the name of
%% the record fields.
%%
%% It is possible to add default values, but be aware that these will
%% only be used when *writing* an xml document.


-type anyAttrib()  :: {{string(),    %% name of the attribute
                        string()},   %% namespace
                       string()}.    %% value

-type anyAttribs() :: [anyAttrib()] | undefined.

%% xsd:QName values are translated to #qname{} records.
-record(qname, {uri :: string(),
                localPart :: string(),
                prefix :: string(),
                mappedPrefix :: string()}).



-record(value, {anyAttribs :: anyAttribs(),
	value :: string()}).

-type value() :: #value{}.


-record(valueName, {anyAttribs :: anyAttribs(),
	valueName :: string()}).

-type valueName() :: #valueName{}.


-record(alert, {anyAttribs :: anyAttribs(),
	identifier :: string(),
	sender :: string(),
	sent :: string(),
	status :: string(),
	msgType :: string(),
	source :: string() | undefined,
	scope :: string(),
	restriction :: string() | undefined,
	addresses :: string() | undefined,
	code :: [string()] | undefined,
	note :: string() | undefined,
	references :: string() | undefined,
	incidents :: string() | undefined,
	info :: ['alert/info'()] | undefined,
	'#any' :: any()}).

-type alert() :: #alert{}.


-record('alert/info', {anyAttribs :: anyAttribs(),
	language :: string() | undefined,
	category :: [string()],
	event :: string(),
	responseType :: [string()] | undefined,
	urgency :: string(),
	severity :: string(),
	certainty :: string(),
	audience :: string() | undefined,
	eventCode :: ['alert/info/eventCode'()] | undefined,
	effective :: string() | undefined,
	onset :: string() | undefined,
	expires :: string() | undefined,
	senderName :: string() | undefined,
	headline :: string() | undefined,
	description :: string() | undefined,
	instruction :: string() | undefined,
	web :: string() | undefined,
	contact :: string() | undefined,
	parameter :: ['alert/info/parameter'()] | undefined,
	resource :: ['alert/info/resource'()] | undefined,
	area :: ['alert/info/area'()] | undefined}).

-type 'alert/info'() :: #'alert/info'{}.


-record('alert/info/area', {anyAttribs :: anyAttribs(),
	areaDesc :: string(),
	polygon :: [string()] | undefined,
	circle :: [string()] | undefined,
	geocode :: ['alert/info/area/geocode'()] | undefined,
	altitude :: string() | undefined,
	ceiling :: string() | undefined}).

-type 'alert/info/area'() :: #'alert/info/area'{}.


-record('alert/info/area/geocode', {anyAttribs :: anyAttribs(),
	valueName :: string(),
	value :: string()}).

-type 'alert/info/area/geocode'() :: #'alert/info/area/geocode'{}.


-record('alert/info/resource', {anyAttribs :: anyAttribs(),
	resourceDesc :: string(),
	mimeType :: string(),
	size :: integer() | undefined,
	uri :: string() | undefined,
	derefUri :: string() | undefined,
	digest :: string() | undefined}).

-type 'alert/info/resource'() :: #'alert/info/resource'{}.


-record('alert/info/parameter', {anyAttribs :: anyAttribs(),
	valueName :: string(),
	value :: string()}).

-type 'alert/info/parameter'() :: #'alert/info/parameter'{}.


-record('alert/info/eventCode', {anyAttribs :: anyAttribs(),
	valueName :: string(),
	value :: string()}).

-type 'alert/info/eventCode'() :: #'alert/info/eventCode'{}.